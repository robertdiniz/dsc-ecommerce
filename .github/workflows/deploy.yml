name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package -DskipTests

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DOCKER_USERNAME,DB_USERNAME,DB_PASSWORD
          script: |
            # Criar diretório se não existir
            mkdir -p ~/app
            
            # Parar containers existentes
            docker-compose -f ~/app/docker-compose.prod.yml down || true
            
            # Remover imagem antiga
            docker rmi ${{ secrets.DOCKER_USERNAME }}/ecommerce:latest || true
            
            # Baixar nova imagem
            docker pull ${{ secrets.DOCKER_USERNAME }}/ecommerce:latest
            
            # Criar docker-compose.prod.yml
            cat > ~/app/docker-compose.prod.yml << 'EOL'
            version: '3.8'
            
            services:
              app:
                image: ${{ secrets.DOCKER_USERNAME }}/ecommerce:latest
                ports:
                  - "8080:8080"
                environment:
                  - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/ecommerce
                  - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
                  - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
                depends_on:
                  - db
            
              db:
                image: postgres:15-alpine
                environment:
                  - POSTGRES_DB=ecommerce
                  - POSTGRES_USER=${DB_USERNAME}
                  - POSTGRES_PASSWORD=${DB_PASSWORD}
                volumes:
                  - postgres_data:/var/lib/postgresql/data
            
            volumes:
              postgres_data:
            EOL
            
            # Iniciar aplicação
            cd ~/app && docker-compose -f docker-compose.prod.yml up -d